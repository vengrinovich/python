from selenium import webdriver
import selenium.webdriver.support.ui as ui
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import Select
from selenium.webdriver.common.action_chains import ActionChains
import codecs
import string
import re

# input your details so the program can use later
my_username = 'insert_username'
my_password = 'insert_password'

# PART I - parsing information from a .txt file


# open the txt file with invoice info from sales reps
# file needs to be in the same folder as the .py program
with codecs.open('invoice_info.txt', 'r') as file_object:
	processed_file = file_object.readlines()
	

# loops through the file line by line, removes special/weird charachters &
# matches the necessary form information to put into relevant strings
for i in processed_file:

	# gets rid of any special characters that might occur during import
	i = i.decode('ascii', errors = 'ignore').encode()

	if 'Account Number:' in i or 'Account number:' in i or 'account number:' in i or 'Account id:' in i or 'Account ID:' in i or 'AWS Account id:' in i or 'Account Id:' in i:
		account_number = i
	if 'Company Name:' in i or 'Company name:' in i or 'company name:' in i:
		company_name = i
	if 'Contact Name:' in i or 'Contact name:' in i or 'contact name:' in i:
		contact_name = i
	if 'Contact Email' in i or 'Contact email' in i or 'contact email' in i:
		contact_email = i
	if 'Contact Phone' in i or 'Contact phone' in i or 'contact phone' in i:
		contact_phone = i
	if 'Address' in i or 'address' in i:
		address = i
	if 'City:' in i or 'city:' in i:
		city = i
	if 'State:' in i or 'state:' in i or 'State/Province:' in i or 'state/province:' in i:
		state = i
	if 'Zip:' in i or 'zip:' in i:
		zip_code = i
	if 'Country:' in i or 'country:' in i:
		country = i		


# further cleans up the information stores to derive only what is
# needed for the form

account_number = account_number.split(':')[1:]
# in case there are '-' in the number, .replace removes them
account_number = ' '.join(account_number).strip().replace('-','')

company_name = company_name.split(':')[1:]
company_name = ' '.join(company_name).strip()

contact_name = contact_name.split(':')[1:]
contact_name = ' '.join(contact_name).strip()

# uses regex to just match the email address(es) and parse them out
# useful in case there is any other text before/after email
contact_email = re.findall(r'[\w\.-]+@[\w\.-]+', contact_email)
contact_email = ''.join(contact_email).strip()

contact_phone = contact_phone.split(':')[1:]
contact_phone = ''.join(contact_phone).strip()

address = address.split(':')[1:]
address = ''.join(address).strip()

city = city.split(':')[1:]
city = ''.join(city).strip()

state = state.split(':')[1:]
state = ''.join(state).strip()

zip_code = zip_code.split(':')[1:]
zip_code = ''.join(zip_code).strip()

country = country.split(':')[1:]
country = ''.join(country).strip()

# PART II: Login to SOT, wait for user to press ubikey

driver = webdriver.Chrome(executable_path='C:\\Users\\vengrip\\Desktop\\Python\\chromedriver.exe')
driver.get('https://aws-tools.amazon.com/servicetools/index.aws')
# variable that tells the driver to wait 60 seconds, used later with .until to allow user to press on ubikey
wait = ui.WebDriverWait(driver, 20)

# identify the webelements user_name & password on the sign-in page
username = driver.find_element_by_name('user_name')
password = driver.find_element_by_name('password')

submit = driver.find_element_by_name('commit')
# fill it out with your defined username and password
username.send_keys(my_username)
password.send_keys(my_password)
submit.click()

# uses wait variable, will wait 60 seconds or timeout of nothing happens after 60 seconds
# if ubikey is pressed in time, locates the search bar, enters the account id and clicks Enter
search_bar = wait.until(lambda driver: driver.find_element_by_name('query'))

# PART III: Search for account ID, check for any failed charges - stop if there are any, continue if not

search_bar.send_keys(account_number)
search_bar.send_keys(Keys.ENTER)

billing_history = driver.find_element_by_link_text('Link to Account Billing History').click()

expand_all = driver.find_element_by_id('expandAll').click()

# gives the code time to wait until everything is expanded
search_for_detail_wait = wait.until(lambda driver: driver.find_element_by_link_text('Details'))

# checks if there are any failed charges, stops if there are, continues to make the switch of not
try:
	driver.find_element_by_link_text('Failed')
	print ('Failed payments found, cannot continue further')
	driver.close()
	driver.quit()
except:
	print ('No failed payments found')

# tells the browser to go back to the previous (main) page to access invoice actions
driver.execute_script("window.history.go(-1)")

# PART III: open the TT using a specified quick link, paste the invoice details, assign to yourself, create ticket & store ticket URL

# Open second driver to access the TT and create a ticket 
second_driver = webdriver.Chrome(executable_path='C:\\Users\\vengrip\\Desktop\\Python\\chromedriver.exe')
second_driver.get('https://tt.amazon.com/quicklink/Q000833734')
wait = ui.WebDriverWait(second_driver, 20)

# add all details later, assign each to a variable
tt_details = second_driver.find_element_by_name('details').send_keys([x for x in processed_file])

# selects yourself as the owner of the ticket
tt_assignee = Select(second_driver.find_element_by_id('assigned_individual')).select_by_value(my_username)

submit_ticket = second_driver.find_element_by_css_selector("a[class='tt_button orange_button']").click()

# store the TT URL to use later for reference
tt_url = second_driver.current_url
  
# PART IV: Goes to switch to invoice actions in SOT, fills out the form based on the stored information (add to functionality to save and verify address later!!!)

# locates invoice actions button and clicks on it
invoice_actions = driver.find_element_by_link_text('Invoice Actions')
invoice_actions.click()

switch_invoice_status = driver.find_element_by_css_selector("a[id='toggleSwitchBlock']").click()

company_name_form = driver.find_element_by_name('company').send_keys(company_name)
contact_name_form = driver.find_element_by_name('contact').send_keys(contact_name)
phone_number_form = driver.find_element_by_name('phone').send_keys(contact_phone)
email_address_form = driver.find_element_by_name('email').send_keys(contact_email)
address_form = driver.find_element_by_name('address1').send_keys(address)
city_form = driver.find_element_by_name('city').send_keys(city)
state_form = driver.find_element_by_name('state').send_keys(state)
zip_code_form = driver.find_element_by_name('zip').send_keys(zip_code)
country_form = Select(driver.find_element_by_id('country')).select_by_visible_text('United States') # add logic for other countries - maybe use abbreviations stripped?
tt_ref_number = driver.find_element_by_name('refnumber').send_keys(tt_url)

# PART V: Goes back to TT, adds correspondence, resolves ticket with successful closure code

correspondence_tab = second_driver.find_element_by_id('tab_correspondence').click()

correspondence_text_area = second_driver.find_element_by_id('correspondence').send_keys("Resolved by WALL-E\n")

correspondence_text_area = second_driver.find_element_by_id('correspondence').send_keys("""
********** _.----. .----._
**********/ ( O ) ' ( O ) \
**********\ _ _.-^-._ _ /
***********`-''''' ''''`-'
**********______//_____
*********.----. :: == .----.
*********[]---| ...==|---[]
*********'----' _____ '----'
******* _____ | | | | | _____
*******|_-_-_|| | | | ||_-_-_|
*******|_-_-_|'--------'|_-_-_|
*******|_-_-_|******|_-_-_|
""")

click_to_edit = second_driver.find_element_by_id('action_bar').click()

status = Select(second_driver.find_element_by_id('status')).select_by_visible_text('Resolved')
closure_code = Select(second_driver.find_element_by_id('closure_code')).select_by_visible_text('Successful')

save_button = second_driver.find_element_by_id('save-button').click()




















