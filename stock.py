# source - http://www.cse.msu.edu/~cse231/PracticeOfComputingUsingPython/05_ListsTuples/AppleStock/project06.pdf

import csv
import datetime
import pandas as pd 

def get_input_descriptor():

	with open ('table.csv', 'rb') as file_object:

		# skips first title line of the csv file
		# groups the rows together into one big list
		skip_first_line = file_object.readlines()[1:]
		
		# reader function generates a reader object
		# The reader function is designed to take each line of the file and make a list of each row separately. 
		# Then, you just choose the row value(s) you want the information for.
		reader = csv.reader(skip_first_line)

		get_data_list(reader)

"""In this function, you are required to read the file of Apple's data. The function is flexible as it can
read the data for any column of the data (0 through 6). If you read column 6, you are gathering the
data for the "Adjusted Daily Close". If you read column 5, you are gathering data for the "Volume"
that day. The function returns a list that consists of tuples. Each tuple is of the form: (date,
column_data). For example: ('2013-02-08', 474.98) if we were collecting data from column 6. """
		
def get_data_list(table_file_processed):		

		# creates an empty list of tuples
		my_tuple = list(())
		
		# takes specific row values from each row in the .csv file
		# and adds them to my_tuple in pairs, like ('1984-09-11', 3.02), etc.
		for row in table_file_processed:
			my_tuple += ((row[0],float(row[6])),)

		average_date(my_tuple)

"""In this function, take in an argument that is the list of tuples generated by get_data_list above. You
will average the data for each month, and regenerate a list of tuples. A tuple here will have the
form: (data_avg, date). For example: (2972945.4545454546, '07:1985') . Note the date does not
contain a day any more."""
		
def average_date(tuples_list):
	
	# takes value from previous function and creates a data frame with
	# column names year & value and rows like: 0  2013-02-08  474.98 
	df = pd.DataFrame(data = tuples_list, columns=['year','value'])

	# makes sure that the date column is in the right datetime format
	# so later you can easily extract date, month or year from it
	df['year'] = pd.to_datetime(df['year'])

	# groups the values month-year in the first column, uses strftime values for month and year
	# then sums the values of grouped items, sorts them and returns
	dff = df.groupby(df['year'].dt.strftime('%m-%Y'))['value'].mean().sort_values()

	print dff


	# this below is the same as above but using a simple example;
	"""x = [('2002-05-01', 968), ('2002-04-01', 155), ('2002-04-01', 155), ('2003-07-01', 578), ('2003-01-01', 973)]

	# creates an dataframe where each values in sublist a is a sepate row with column names year & column,
	df = pd.DataFrame(data = x, columns=['year','number'])

	# makes sure that the date column is in the right datetime format
	# so letter you can easily extract date, month or year from it
	df['year'] = pd.to_datetime(df['year'])
	
	# groups the values month-year in the first column, uses strftime values for month and year
	# then sums the values of grouped items, sorts them and returns
	dff = df.groupby(df['year'].dt.strftime('%m-%Y'))['number'].sum().sort_values()

	print dff"""


get_input_descriptor()

